<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="https://code.jquery.com/jquery-3.4.1.js"
        integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"></script>
    <title>Chat</title>
</head>

<body>
    <div>
        <input type='text' id='hostInput' value='192.168.0.40'>
        <input type='text' id='portInput' value='3000'>
        <input type='button' id='connectButton' value='연결하기'>
    </div>
    <div>
        <div>
            <span>보내는 사람 아이디 :</span>
            <input type='text' id='senderInput' value='test01'>
        </div>
        <div>
            <span>받는 사람 아이디 :</span>
            <input type='text' id='recepientInput' value='ALL'>
        </div>
        <div>
            <span>메시지 데이터 : </span>
            <input type='text' id='dataInput' value='안녕!'>
        </div>
        <br>
        <input type='button' id='sendButton' value='전송'>
    </div>
    <div>
        <div>
            <input type='text' id='idInput' value='test01'>
            <input type='password' id='passwordInput' value='123456'>
            <input type='text' id='aliasInput' value='소녀시대'>
            <input type='text' id='todayInput' value='좋은 날!'>
            <input type='button' id='loginButton' value='로그인'>
            <input type='button' id='logoutButton' value='로그아웃'>
        </div>
    </div>
    <div>
        <div>
            <input type='text' id='roomIdInput' value='meeting01'>
            <input type='text' id='roomNameInput' value='청춘들의 대화'>
            <input type='text' id='createRoomButton' value='방 만들기'>
            <input type='text' id='updateRoomButton' value='방 이름 바꾸기'>
            <input type='text' id='deleteRoomButton' value='방 없애기'>
        </div>
    </div>
    <br>
    <div id='roomList'>

    </div>
    <hr>
    <p>결과 : </p>
    <div id='result'></div>
</body>
<script src='socket.io/socket.io.js'></script>

<script>

    function println(data) {
        console.log(data);
        $('#result').append('<p>' + data + '<p>');
    }

    var host;
    var port;
    var socket;

    $(document).ready(() => {
        $('#connectButton').bind('click', (event) => {
            println('connectButton이 클릭되었습니다.');

            host = document.getElementById('hostInput').value;
            port = document.getElementById('portInput').value;

            connectToServer();
        });
    });

    $('#sendButton').bind('click', (event) => {
        var sender = document.getElementById('senderInput').value;
        var recepient = document.getElementById('recepientInput').value;
        var data = document.getElementById('dataInput').value;

        var output = { sender: sender, recepient: recepient, command: 'chat', type: 'text', data: data };
        console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

        if (socket == undefined) {
            alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요. ');
            return;
        }

        socket.emit('message', output);
    });

    $('#loginButton').bind('click', (event) => {
        var id = document.getElementById('idInput').value;
        var password = document.getElementById('passwordInput').value;
        var alias = document.getElementById('aliasInput').value;
        var today = document.getElementById('todayInput').value;

        var output = { id: id, password: password, alias: alias, today: today };
        console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

        if (socket == undefined) {
            alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요.');
            return;
        }

        socket.emit('login', output);
    });

    $('#createRoomButton').bind('click', (event) => {
        var roomId = document.getElementById('roomIdInput').value;
        var roomName = document.getElementById('roomNameInput').value;
        var id = document.getElementById('idInput').value;

        var output = { command: command, roomId: roomId, roomName: roomName, roomOwner: id };
        console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

        if (socket == undefined) {
            alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요.');
            return;
        }

        socket.emit('room', output);
    });

    $('deleteRoomButton').bind('click', (event) => {
        var roomId = document.getElementById('roomIdInput').value;
        var ourput = { command: 'delete', roomId: roomId };
        console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

        if(socket == undefined) {
            alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요. ');
            return;
        }

        socket.emit('room', output);
    });

    connectToServer = () => {
        var options = { 'forceNew': true };
        var url = 'http://' + host + ':' + port;
        socket = io.connect(url, options);

        socket.on('connect', () => {
            println('웹 소켓 서버에 연결되었습니다. : ' + url);

            socket.on('message', (message) => {
                console.log(JSON.stringify(message));

                println('<p>수신메시지 : ' + message.sender + ', ' + message.recepient + ', ' + message.command + ', ' + message.type + ', ' + message.data + '</p>');
            });

            socket.on('response', (response) => {
                console.log(JSON.stringify(response));
                println('응답 메시지를 받았습니다. : ' + response.command + ', ' + response.code + ', ' + response.message);
            });

            socket.on('room', (data) => {
                console.log(JSON.stringify(data));
                
                println('<p>방 이벤트 : ' + data.command + '</p>');
                println('<p>방 리스트를 받았습니다</p>');

                if(data.command == 'list') {
                    var roomCount = data.rooms.length;
                    $('#roomList').html('<p>방 리스트 ' + roomCount + '개</p>');
                    for(var i = 0; i < roomCount; i++) {
                        $('roomList').append('<p>방 #' + i + ' : ' + data.rooms[i].id + ', ' + data.rooms[i].name + ', ' + data.rooms[i].owner + '</p>');
                    }
                }
            });

        });

        socket.on('disconnect', () => {
            println('웹 소켓 연결이 종료되었습니다.');
        });
    }



</script>

</html>